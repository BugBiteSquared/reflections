When would you want to use a remote repository rather than keeping all your work local?

I would use a remote repository if I'm concerned about the losing work on a local repository or if I want to collaborate on a project.
This means pretty much any significant project I plan to work on, even including some toy problems I'm comfortable showing off. 
On that note, my Github page is pretty sparse at the moment due to only recently making it, and working with team members
unfamiliar with version control solutions like Git.

--------------------------------------------
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

It makes sense to manually pull changes due to the cases where a given pull may result in breaking your code and the fact
that it'll become difficult to keep up with changes to code over time if the pulls come automatically. It would be much
like having a book change while you're not reading it. Things would become disorienting rather quickly. 
I'd personally rather have email notifications with new commits if I wanted to keep up with a project. 
---------------------------------------------
Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks:
Effectively clones of a given repository that are handled on Github's end. Good for if you want to build on someone
else's prexisting repository.

Clones:
A local "clone" of a repository on your machine. You clone a repository to have a copy of its contents so that you can
modify them and play with them as you see fit. Includes cloning from Github and from your local machine.
Afterwards you may commit and push changes if you have permissions, or simply modify and view files and directories.

Branches:
A branch is a sort of running history (including the "present", the tip) of a given piece of code or work.
A branch can spawn more branches that may eventually merge back together. For example, this splitting is good
for keeping a module effectively separate from the main "master" branch until it's ready to be assembled.
You would use branches to similar to forks, but on a smaller scale, building on the work from one or more other
branches.

These are very qualitative descriptions and may not be airtight. 
-------------------
What is the benefit of having a copy of the last known state of the remote stored locally?

It's helpful to know the last known state of the remote whether you're airgapped (not connected to the internet) or not. 
You can use git fetch followed by git status to determinen if there's a conflict between your local changes and the remote.
------------------
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I have collaborated without Git or Github (or any formal version control system) in the past, and it's not particularly
easy, elegant, or fun. Files can be emailed back and forth, cloud-based storage systems like Dropbox, Box, and Google Drive
can be used, but keeping track of changes and versions becomes difficult quickly, even for small projects. It would be
easier to learn how to use email and these cloud-storage services, but keeping everybody on the same page with regards to
changes would be difficult. You would have to just post entirely new versions of source code files in order to avoid conflicts
and would run into concurrency problems not unlike the race-conditions seen in multithreaded programming (two or more "writers"
trying to access a resource at the same time).

This is why you almost always want to use some sort of version control system, and this is why I'm evaluating this Udacity 
course for training team members to use Git and Github. It's worth it in the end to take the time to teach team members to
use a VCS as opposed to using more intuitive, but less effective systems. 
------------------